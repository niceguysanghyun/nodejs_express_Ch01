{"version":3,"sources":["../../routes/users.js"],"names":["express","require","router","Router","post","req","res","next","body","id","pwd","status","json","message","name","error","Error","User","CreatedUser","route","module","exports"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,SAASF,QAAQG,MAAR,EAAb;;AAIAD,OAAOE,IAAP,CAAY,QAAZ,EAAqB,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAgB;AAAA,oBAEhBF,IAAIG,IAFY;AAAA,QAE1BC,EAF0B,aAE1BA,EAF0B;AAAA,QAEvBC,GAFuB,aAEvBA,GAFuB,EAEN;;AAC3B,QAAID,OAAM,KAAV,EAAiB;AACbH,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAQ,gBAAT,EAArB;AACA;AACH,KAHD,MAGM,IAAIH,QAAO,QAAX,EAAqB;AACvBJ,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAQ,kBAAT,EAArB;AACA;AACH;;AAEDN;AACH,CAZD;;AAcAL,OAAOE,IAAP,CAAY,QAAZ,EAAqB,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACnC;;;;;AAKAD,QAAIM,IAAJ,CAAS,EAACC,SAAQ,MAAT,EAAT;AACH,CAPD;;AASAX,OAAOE,IAAP,CAAY,GAAZ,EAAgB,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAiB;AAC7B;;;;;AAD6B,qBAMPF,IAAIG,IANG;AAAA,QAMtBC,EANsB,cAMtBA,EANsB;AAAA,QAMnBC,GANmB,cAMnBA,GANmB;AAAA,QAMfI,IANe,cAMfA,IANe;;AAO7B,QAAIL,OAAM,KAAV,EAAiB;AACf,YAAMM,QAAQ,IAAIC,KAAJ,CAAU,gBAAV,CAAd;AACAD,cAAMJ,MAAN,GAAe,GAAf;AACA,eAAOJ,KAAKQ,KAAL,CAAP;AACE;AACA;AACH,KAND,MAMM,IAAIL,QAAO,QAAX,EAAqB;AACvB,YAAMK,SAAQ,IAAIC,KAAJ,CAAU,aAAV,CAAd;AACAD,eAAMJ,MAAN,GAAe,GAAf;AACA,eAAOJ,KAAKQ,MAAL,CAAP;AAEH;;AAGD,QAAME,OAAO;AACXR,YAAKA,EADM;AAEXC,aAAIA,GAFO;AAGXI,cAAKA;AAHM,KAAb;AAKAT,QAAIa,WAAJ,GAAkBD,IAAlB;AACAV,SAAKY,MAAM,KAAN,CAAL;AACA;AAEH,CA9BD,EA8BE,UAACd,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAgB;AACdD,QAAIM,IAAJ,CAASP,IAAIa,WAAb;AACH,CAhCD;;AAkCAhB,OAAOE,IAAP,CAAY,GAAZ,EAAgB,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAgB;AAC9BD,QAAIM,IAAJ,CAASP,IAAIa,WAAb;AACD,CAFD;;AAIAE,OAAOC,OAAP,GAAiBnB,MAAjB","file":"users.js","sourcesContent":["var express = require('express');\nvar router = express.Router();\n\n\n\nrouter.post('/login',(req,res,next)=>{\n\n    const {id,pwd} = req.body; //오브젝트 디스처링\n    if( id !=='이상현') {\n        res.status(404).json({message:\"USER NOT FOUND\"});\n        return;\n    }else if (pwd !=='이상현123') {\n        res.status(401).json({message:\"Invalid Password\"});\n        return;\n    }\n\n    next();\n});\n\nrouter.post('/login',(req,res,next) => {\n    /**\n     *  Login 요청 : 요청은 메소드는 POST\n     *  그리고 Body에 id,pwd 키로 값을 보낸다 로그인성공조건은 id = 본인이름, pwd = 본인이름+123\n     */\n\n    res.json({message:\"성공! \"})\n});\n\nrouter.post('/',(req,res,next) =>{\n    /**\n     *  id,pwd,name\n     *  content-type : x-www-urlencodeed,application/json\n     *\n     */\n    const {id,pwd,name} = req.body;\n    if( id !=='이상현') {\n      const error = new Error(\"User Not Found\");\n      error.status = 404;\n      return next(error)\n        //res.status(404).json({message:\"USER NOT FOUND\"});\n        return;\n    }else if (pwd !=='이상현123') {\n        const error = new Error(\"Invalid pwd\");\n        error.status = 401;\n        return next(error)\n\n    }\n\n\n    const User = {\n      id : id,\n      pwd:pwd,\n      name:name\n    };\n    req.CreatedUser = User;\n    next(route('/gg'));\n    //\n\n},(req,res,next)=>{\n    res.json(req.CreatedUser);\n});\n\nrouter.post('/',(req,res,next)=>{\n  res.json(req.CreatedUser);\n});\n\nmodule.exports = router;\n"]}